import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  DollarSign, TrendingUp, Zap, Target, \n  Cpu, Activity, BarChart3, Clock,\n  CheckCircle, AlertTriangle, Info\n} from 'lucide-react';\n\n// AI Cost Monitoring Dashboard Component\nconst AICostDashboard = () => {\n  const [costMetrics, setCostMetrics] = useState({\n    dailyBudget: 50.0,\n    dailySpent: 23.47,\n    listingsAnalyzed: 7823,\n    threatsDetected: 156,\n    avgCostPerListing: 0.003,\n    cacheHitRate: 67.2,\n    modelsUsed: {\n      haiku: 6234,\n      sonnet: 1432,\n      opus: 157\n    },\n    budgetUtilization: 46.9,\n    projectedMonthly: 164.50\n  });\n\n  const [optimizationTips, setOptimizationTips] = useState([\n    { type: 'success', message: 'Pre-filtering saved $127.50 today by avoiding 42,000 unnecessary AI calls' },\n    { type: 'info', message: 'Batch processing reduced costs by 15x compared to individual analysis' },\n    { type: 'warning', message: 'Consider increasing Haiku usage for medium-priority listings' }\n  ]);\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCostMetrics(prev => ({\n        ...prev,\n        dailySpent: prev.dailySpent + (Math.random() * 0.1),\n        listingsAnalyzed: prev.listingsAnalyzed + Math.floor(Math.random() * 10),\n        threatsDetected: prev.threatsDetected + (Math.random() > 0.9 ? 1 : 0)\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getBudgetStatus = () => {\n    const utilization = (costMetrics.dailySpent / costMetrics.dailyBudget) * 100;\n    if (utilization > 90) return { color: 'red', status: 'Critical', description: 'Near budget limit' };\n    if (utilization > 70) return { color: 'orange', status: 'Warning', description: 'High usage' };\n    return { color: 'green', status: 'Healthy', description: 'On track' };\n  };\n\n  const budgetStatus = getBudgetStatus();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">AI Cost Optimization</h2>\n          <p className=\"text-gray-600\">Real-time monitoring of Anthropic API usage and costs</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-3 h-3 rounded-full bg-${budgetStatus.color}-500 animate-pulse`}></div>\n          <span className={`text-sm font-medium text-${budgetStatus.color}-700`}>\n            {budgetStatus.status}\n          </span>\n        </div>\n      </div>\n\n      {/* Cost Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* Daily Budget */}\n        <motion.div\n          whileHover={{ scale: 1.02 }}\n          className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl p-6 text-white\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <DollarSign size={28} />\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold\">${costMetrics.dailySpent.toFixed(2)}</div>\n              <div className=\"text-blue-100 text-sm\">of ${costMetrics.dailyBudget}</div>\n            </div>\n          </div>\n          <div className=\"w-full bg-blue-400/30 rounded-full h-2 mb-2\">\n            <div \n              className=\"bg-white rounded-full h-2 transition-all duration-300\"\n              style={{ width: `${Math.min((costMetrics.dailySpent / costMetrics.dailyBudget) * 100, 100)}%` }}\n            ></div>\n          </div>\n          <div className=\"text-blue-100 text-sm\">\n            {((costMetrics.dailySpent / costMetrics.dailyBudget) * 100).toFixed(1)}% used today\n          </div>\n        </motion.div>\n\n        {/* Listings Analyzed */}\n        <motion.div\n          whileHover={{ scale: 1.02 }}\n          className=\"bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-2xl p-6 text-white\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <Target size={28} />\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold\">{costMetrics.listingsAnalyzed.toLocaleString()}</div>\n              <div className=\"text-emerald-100 text-sm\">Listings Analyzed</div>\n            </div>\n          </div>\n          <div className=\"text-emerald-100 text-sm\">\n            ${costMetrics.avgCostPerListing.toFixed(4)} per listing\n          </div>\n        </motion.div>\n\n        {/* Threats Detected */}\n        <motion.div\n          whileHover={{ scale: 1.02 }}\n          className=\"bg-gradient-to-br from-red-500 to-red-600 rounded-2xl p-6 text-white\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <AlertTriangle size={28} />\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold\">{costMetrics.threatsDetected}</div>\n              <div className=\"text-red-100 text-sm\">Threats Detected</div>\n            </div>\n          </div>\n          <div className=\"text-red-100 text-sm\">\n            {((costMetrics.threatsDetected / costMetrics.listingsAnalyzed) * 100).toFixed(1)}% detection rate\n          </div>\n        </motion.div>\n\n        {/* Cache Performance */}\n        <motion.div\n          whileHover={{ scale: 1.02 }}\n          className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl p-6 text-white\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <Zap size={28} />\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold\">{costMetrics.cacheHitRate.toFixed(1)}%</div>\n              <div className=\"text-purple-100 text-sm\">Cache Hit Rate</div>\n            </div>\n          </div>\n          <div className=\"text-purple-100 text-sm\">\n            Saved ~${(costMetrics.cacheHitRate * costMetrics.dailySpent / 100).toFixed(2)} today\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Model Usage Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Model Distribution */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-white rounded-2xl p-6 border border-gray-100\"\n        >\n          <h3 className=\"text-xl font-bold text-gray-900 mb-6\">Model Usage Distribution</h3>\n          <div className=\"space-y-4\">\n            {Object.entries(costMetrics.modelsUsed).map(([model, count], index) => {\n              const total = Object.values(costMetrics.modelsUsed).reduce((a, b) => a + b, 0);\n              const percentage = ((count / total) * 100).toFixed(1);\n              const modelColors = {\n                haiku: 'bg-green-500',\n                sonnet: 'bg-blue-500', \n                opus: 'bg-purple-500'\n              };\n              const costs = {\n                haiku: '$0.25/1M',\n                sonnet: '$3/1M',\n                opus: '$15/1M'\n              };\n              \n              return (\n                <div key={model} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`w-4 h-4 rounded-full ${modelColors[model]}`}></div>\n                    <div>\n                      <div className=\"font-semibold text-gray-900 capitalize\">Claude 3 {model}</div>\n                      <div className=\"text-sm text-gray-500\">{costs[model]} tokens</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-gray-900\">{count.toLocaleString()}</div>\n                    <div className=\"text-sm text-gray-500\">{percentage}%</div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Optimization Insights */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-white rounded-2xl p-6 border border-gray-100\"\n        >\n          <h3 className=\"text-xl font-bold text-gray-900 mb-6\">Optimization Insights</h3>\n          <div className=\"space-y-4\">\n            {optimizationTips.map((tip, index) => {\n              const iconColors = {\n                success: 'text-green-600',\n                warning: 'text-orange-600',\n                info: 'text-blue-600'\n              };\n              const bgColors = {\n                success: 'bg-green-50 border-green-200',\n                warning: 'bg-orange-50 border-orange-200', \n                info: 'bg-blue-50 border-blue-200'\n              };\n              \n              return (\n                <div key={index} className={`flex items-start space-x-3 p-4 rounded-xl border ${bgColors[tip.type]}`}>\n                  {tip.type === 'success' && <CheckCircle size={20} className={iconColors[tip.type]} />}\n                  {tip.type === 'warning' && <AlertTriangle size={20} className={iconColors[tip.type]} />}\n                  {tip.type === 'info' && <Info size={20} className={iconColors[tip.type]} />}\n                  <span className=\"text-sm text-gray-700\">{tip.message}</span>\n                </div>\n              );\n            })}\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Cost Projections */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-gradient-to-r from-gray-50 to-blue-50 rounded-2xl p-6 border border-gray-200\"\n      >\n        <h3 className=\"text-xl font-bold text-gray-900 mb-6\">Cost Projections & ROI</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">${costMetrics.projectedMonthly.toFixed(0)}</div>\n            <div className=\"text-gray-600 text-sm\">Projected Monthly</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">${(costMetrics.threatsDetected * 12000).toLocaleString()}</div>\n            <div className=\"text-gray-600 text-sm\">Trade Value Prevented</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {((costMetrics.threatsDetected * 12000) / costMetrics.dailySpent).toFixed(0)}x\n            </div>\n            <div className=\"text-gray-600 text-sm\">ROI Multiplier</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {(costMetrics.listingsAnalyzed / costMetrics.dailySpent).toFixed(0)}\n            </div>\n            <div className=\"text-gray-600 text-sm\">Listings per $1</div>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default AICostDashboard;\n