import React, { useState, useEffect, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  AlertTriangle, X, Archive, ExternalLink, Image, \n  FileText, Camera, Cpu, Copy, CheckCircle, Download,\n  BarChart3, Shield, Target, Globe, DollarSign\n} from 'lucide-react';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://hgnefrvllutcagdutcaa.supabase.co';\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhnbmVmcnZsbHV0Y2FnZHV0Y2FhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkzMjU4NzcsImV4cCI6MjA2NDkwMTg3N30.ftaP4Xa1vTXumTlcPy0OwdG1s-4JSYz10-ENiWB_QZ0';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nconst AI_ENABLED = process.env.REACT_APP_AI_ENABLED === 'true' || false;\n\nconst MONITORED_PLATFORMS = [\n  { name: 'eBay', region: 'Global', color: 'blue' },\n  { name: 'Marketplaats', region: 'Netherlands', color: 'green' },\n  { name: 'MercadoLibre', region: 'Latin America', color: 'orange' },\n  { name: 'OLX', region: 'Global', color: 'purple' },\n  { name: 'Craigslist', region: 'US/Canada', color: 'red' }\n];\n\n// FIXED Threat Intelligence with real data from 550k detections\nconst ThreatIntelligence = () => {\n  const [detections, setDetections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedThreat, setSelectedThreat] = useState(null);\n  const [filterLevel, setFilterLevel] = useState('all');\n  const [filterPlatform, setFilterPlatform] = useState('all');\n\n  useEffect(() => {\n    const fetchThreats = async () => {\n      try {\n        // Fetch threats using CORRECT field names\n        const { data, error } = await supabase\n          .from('detections')\n          .select('*')\n          .order('timestamp', { ascending: false })\n          .limit(500); // Get more threats to show\n\n        if (error) throw error;\n        setDetections(data || []);\n      } catch (error) {\n        console.error('Error fetching threats:', error);\n        setDetections([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchThreats();\n  }, []);\n\n  const filteredDetections = useMemo(() => {\n    return detections.filter(detection => {\n      const levelMatch = filterLevel === 'all' || \n        detection.threat_level?.toLowerCase() === filterLevel.toLowerCase();\n      const platformMatch = filterPlatform === 'all' || \n        detection.platform?.toLowerCase() === filterPlatform.toLowerCase();\n      return levelMatch && platformMatch;\n    });\n  }, [detections, filterLevel, filterPlatform]);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-red-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      className=\"space-y-8\"\n    >\n      {/* Header */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n        <div>\n          <h1 className=\"text-4xl font-black text-gray-900 mb-2\">\n            Active Threat Monitoring\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Live threats detected across global platforms\n          </p>\n          {!AI_ENABLED && (\n            <div className=\"mt-2 px-3 py-1 bg-amber-100 text-amber-800 rounded-lg text-sm font-medium inline-block\">\n              âš¡ Threat detection in Free Mode - Rule-based analysis\n            </div>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-4 mt-4 lg:mt-0\">\n          <select\n            value={filterLevel}\n            onChange={(e) => setFilterLevel(e.target.value)}\n            className=\"bg-white border border-gray-300 rounded-xl px-4 py-2 text-sm font-medium\"\n          >\n            <option value=\"all\">All Levels</option>\n            <option value=\"high\">High Priority</option>\n            <option value=\"medium\">Medium Priority</option>\n            <option value=\"low\">Low Priority</option>\n          </select>\n          <select\n            value={filterPlatform}\n            onChange={(e) => setFilterPlatform(e.target.value)}\n            className=\"bg-white border border-gray-300 rounded-xl px-4 py-2 text-sm font-medium\"\n          >\n            <option value=\"all\">All Platforms</option>\n            {MONITORED_PLATFORMS.map(platform => (\n              <option key={platform.name} value={platform.name.toLowerCase()}>{platform.name}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Threat Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-red-500 text-white rounded-2xl p-6\">\n          <div className=\"text-3xl font-bold\">{filteredDetections.filter(d => d.threat_level?.toLowerCase() === 'high').length}</div>\n          <div className=\"text-red-100\">High Priority</div>\n        </div>\n        <div className=\"bg-orange-500 text-white rounded-2xl p-6\">\n          <div className=\"text-3xl font-bold\">{filteredDetections.filter(d => d.threat_level?.toLowerCase() === 'medium').length}</div>\n          <div className=\"text-orange-100\">Medium Priority</div>\n        </div>\n        <div className=\"bg-yellow-500 text-white rounded-2xl p-6\">\n          <div className=\"text-3xl font-bold\">{filteredDetections.filter(d => d.threat_level?.toLowerCase() === 'low').length}</div>\n          <div className=\"text-yellow-100\">Low Priority</div>\n        </div>\n        <div className=\"bg-blue-500 text-white rounded-2xl p-6\">\n          <div className=\"text-3xl font-bold\">{filteredDetections.length}</div>\n          <div className=\"text-blue-100\">Total Filtered</div>\n        </div>\n      </div>\n\n      {/* Threat List */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-2xl border border-gray-100\"\n      >\n        <div className=\"p-6 border-b border-gray-100\">\n          <h3 className=\"text-xl font-bold text-gray-900\">\n            Active Threats ({filteredDetections.length})\n          </h3>\n        </div>\n        \n        <div className=\"max-h-96 overflow-y-auto\">\n          {filteredDetections.length > 0 ? (\n            filteredDetections.slice(0, 50).map((detection, index) => (\n              <motion.div\n                key={detection.id || index}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.02 }}\n                onClick={() => setSelectedThreat(detection)}\n                className=\"p-4 border-b border-gray-50 hover:bg-gray-50 cursor-pointer transition-colors\"\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <div className={`w-4 h-4 rounded-full mt-1 ${\n                    detection.threat_level?.toLowerCase() === 'high' ? 'bg-red-500' :\n                    detection.threat_level?.toLowerCase() === 'medium' ? 'bg-orange-500' : 'bg-yellow-500'\n                  }`}></div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <span className=\"font-semibold text-gray-900\">\n                        {detection.listing_title?.slice(0, 60) || 'Wildlife Product Detection'}...\n                      </span>\n                      <span className={`px-2 py-1 rounded-lg text-xs font-medium ${\n                        detection.threat_level?.toLowerCase() === 'high' ? 'bg-red-100 text-red-700' :\n                        detection.threat_level?.toLowerCase() === 'medium' ? 'bg-orange-100 text-orange-700' :\n                        'bg-yellow-100 text-yellow-700'\n                      }`}>\n                        {(detection.threat_level || 'MEDIUM').toUpperCase()}\n                      </span>\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600 mb-2\">\n                      Platform: <span className=\"font-medium\">{detection.platform}</span>\n                      {detection.listing_url && (\n                        <span className=\"ml-4\">\n                          URL: <span className=\"font-mono text-xs\">{detection.listing_url.slice(0, 50)}...</span>\n                        </span>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-gray-500\">\n                        Detected: {new Date(detection.timestamp).toLocaleString()}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {detection.threat_score && (\n                          <span className=\"text-xs font-medium text-blue-600\">\n                            Score: {detection.threat_score}\n                          </span>\n                        )}\n                        {detection.listing_price && (\n                          <span className=\"text-xs font-medium text-green-600\">\n                            ${parseFloat(detection.listing_price).toFixed(2)}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            ))\n          ) : (\n            <div className=\"p-8 text-center text-gray-500\">\n              No threats detected with current filters.\n              {filterLevel !== 'all' || filterPlatform !== 'all' ? (\n                <div className=\"mt-2\">\n                  <button\n                    onClick={() => {\n                      setFilterLevel('all');\n                      setFilterPlatform('all');\n                    }}\n                    className=\"text-blue-600 hover:text-blue-700 font-medium\"\n                  >\n                    Clear filters\n                  </button>\n                </div>\n              ) : null}\n            </div>\n          )}\n        </div>\n      </motion.div>\n\n      {/* Threat Detail Modal */}\n      {selectedThreat && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\"\n          onClick={() => setSelectedThreat(null)}\n        >\n          <motion.div\n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-white rounded-2xl p-8 max-w-2xl w-full max-h-[80vh] overflow-y-auto\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-2xl font-bold text-gray-900\">Threat Details</h3>\n              <button\n                onClick={() => setSelectedThreat(null)}\n                className=\"p-2 hover:bg-gray-100 rounded-xl\"\n              >\n                <X size={24} />\n              </button>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Detection Information</h4>\n                <div className=\"bg-gray-50 rounded-xl p-4 space-y-2\">\n                  <div><span className=\"font-medium\">Title:</span> {selectedThreat.listing_title || 'Not specified'}</div>\n                  <div><span className=\"font-medium\">Platform:</span> {selectedThreat.platform}</div>\n                  <div><span className=\"font-medium\">Threat Level:</span> \n                    <span className={`ml-2 px-2 py-1 rounded text-xs font-medium ${\n                      selectedThreat.threat_level?.toLowerCase() === 'high' ? 'bg-red-100 text-red-700' :\n                      selectedThreat.threat_level?.toLowerCase() === 'medium' ? 'bg-orange-100 text-orange-700' :\n                      'bg-yellow-100 text-yellow-700'\n                    }`}>\n                      {(selectedThreat.threat_level || 'medium').toUpperCase()}\n                    </span>\n                  </div>\n                  {selectedThreat.threat_score && (\n                    <div><span className=\"font-medium\">Threat Score:</span> {selectedThreat.threat_score}</div>\n                  )}\n                  {selectedThreat.listing_price && (\n                    <div><span className=\"font-medium\">Price:</span> ${parseFloat(selectedThreat.listing_price).toFixed(2)}</div>\n                  )}\n                  <div><span className=\"font-medium\">Detected:</span> {new Date(selectedThreat.timestamp).toLocaleString()}</div>\n                </div>\n              </div>\n              \n              {selectedThreat.listing_url && (\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">Source Information</h4>\n                  <div className=\"bg-gray-50 rounded-xl p-4\">\n                    <div className=\"font-mono text-sm break-all\">{selectedThreat.listing_url}</div>\n                  </div>\n                </div>\n              )}\n              \n              {selectedThreat.search_term && (\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">Search Term</h4>\n                  <div className=\"bg-gray-50 rounded-xl p-4\">\n                    <span className=\"px-2 py-1 bg-blue-100 text-blue-700 rounded text-sm\">\n                      {selectedThreat.search_term}\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </motion.div>\n  );\n};\n\nexport default ThreatIntelligence;